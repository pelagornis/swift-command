import Foundation

/// The response from a command execution.
public struct Response {
    /// The status code returned by the command.
    public let statusCode: Int32
    /// The output of the command.
    public let output: String
    /// Any error messages generated by the command.
    public let error: String
    /// The execution time of the command (in seconds).
    public let executionTime: TimeInterval?
    /// The termination reason of the process.
    public let terminationReason: Process.TerminationReason?
    /// The resource usage info (Darwin only).
    public let resourceUsage: rusage?
    /// Creates a new response.
    /// - Parameters:
    ///   - statusCode: The exit status code.
    ///   - output: The standard output.
    ///   - error: The standard error output.
    ///   - executionTime: The execution time in seconds.
    ///   - terminationReason: The process termination reason.
    ///   - resourceUsage: The resource usage info (Darwin only).
    public init(statusCode: Int32, output: String, error: String, executionTime: TimeInterval? = nil, terminationReason: Process.TerminationReason? = nil, resourceUsage: rusage? = nil) {
        self.statusCode = statusCode
        self.output = output
        self.error = error
        self.executionTime = executionTime
        self.terminationReason = terminationReason
        self.resourceUsage = resourceUsage
    }
}

extension Response: Equatable {
    public static func == (lhs: Self, rhs: Self) -> Bool {
        return lhs.statusCode == rhs.statusCode
    }
}
