/// Support Tuist Command
public struct Tuist {
    @Command(\.bash) private var bash

    /// Installs any remote content (e.g.dependencies) necessary to interact with the project.
    @discardableResult
    public func install(at path: String = ".", _ options: String = "") -> Result {
        return run(at: path, ["install", options])
    }

    /// Warms the local and remote cache.
    @discardableResult
    public func cache(at path: String = ".", _ arguments: [String]) -> Result {
        return run(at: path, ["cache"] + arguments)
    }

    /// Build the project in the current directory
    @discardableResult
    public func build(at path: String = ".") -> Result {
        return run(at: path, ["build"])
    }

    /// Build the project add Arguments
    @discardableResult
    public func build(at path: String = ".", _ arguments: [String]) -> Result {
        return run(at: path, ["build"] + arguments)
    }

    /// To clean all the data generated by Tuist
    @discardableResult
    public func clean(at path: String = ".", _ subset: String = "") -> Result {
        return run(at: path, ["clean", subset])
    }

    /// Editing your projects command
    @discardableResult
    public func edit(at path: String = ".", _ options: String = "") -> Result {
        return run(at: path, ["edit", options])
    }

    /// Running `tuist graph` Command
    @discardableResult
    public func graph(at path: String = ".") -> Result {
        return run(at: path, ["graph"])
    }
    
    /// Running `tuist graph` Command with arguments
    @discardableResult
    public func graph(at path: String = ".", _ arguments: [String]) -> Result {
        return run(at: path, ["graph"] + arguments)
    }

    /// To generate the project in the current directory command
    @discardableResult
    public func generate(at path: String = ".") -> Result {
        return run(at: path, ["generate"])
    }
    
    /// To generate the project in the current directory command with arguments
    @discardableResult
    public func generate(at path: String = ".", _ arguments: [String]) -> Result {
        return run(at: path, ["generate"] + arguments)
    }

    /// Running `tuist migration` command
    @discardableResult
    public func migration(at path: String = ".", _ arguments: [String]) -> Result {
        return run(at: path, ["migration"] + arguments)
    }
    
    /// Running `tuist scaffold` command
    @discardableResult
    public func scaffold(at path: String = "." ,_ templateName: String, _ arguments: [String] = []) -> Result {
        return run(at: path, ["scaffold", templateName] + arguments)
    }

    /// Test the project in the current directory
    @discardableResult
    public func test(at path: String = ".") -> Result {
        return run(at: path, ["test"])
    }

    /// Test the project with arguments
    @discardableResult
    public func test(at path: String = ".",_ arguments: [String]) -> Result {
        return run(at: path, ["test"] + arguments)
    }

    /// tuist xcodebuild extends the xcodebuild CLI with server capabilities such as selective testing or analytics.
    @discardableResult
    public func xcodebuild(at path: String = ".",_ arguments: [String]) -> Result {
        return run(at: path, ["xcodebuild"] + arguments)
    }

    /// Running Tuist Command
    @discardableResult
    public func run(at path: String?, _ arguments: [String]) -> Result {
        let command = ["tuist"] + arguments
        let arguments = Arguments(command)
        return bash.run(arguments, directory: path)
    }
}

extension CommandValues {
    /// Support Tuist Command
    public var tuist: Tuist {
        Tuist()
    }
}
